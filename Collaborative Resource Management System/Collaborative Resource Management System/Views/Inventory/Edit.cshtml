@model Collaborative_Resource_Management_System.Models.InventoryItem

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Edit Inventory Item";
}

<div class="container">

    <form asp-action="Edit" asp-controller="Inventory" method="post">
        <input type="hidden" name="InventoryItemID" value="@Model.InventoryItemID" />

        <div class="form-group">
            <label for="Image">Image:</label>
            <input type="file" id="Image" name="Image" class="form-control-file" accept="image/*" style="display: none;">
            <div id="drop-area" role="button" aria-label="Drag and drop area for image upload" tabindex="0" style="border: 2px dashed #ccc; padding: 20px; text-align: center;">
                <p>Drag and drop an image here.</p>
                <div id="preview-container" style="margin-top: 20px;"></div>
            </div>
            <input type="file" id="visible-input" name="VisibleImage" class="form-control-file" accept="image/*" style="margin-top: 10px;">
        </div>

        <div class="form-group">
            <label>Name:</label>
            <input class="form-control" name="Name" value="@Model.Name" />
        </div>

        <div class="form-group">
            <label>Description:</label>
            <input class="form-control" name="Description" value="@Model.Description" />
        </div>

        <div class="form-group">
            <label>Room Number:</label>
            <input type="number" class="form-control" name="RoomNumber" value="@Model.RoomNumber" />
        </div>

        <div class="form-group">
            <label>Category:</label>
            <select class="form-control" name="CategoryID">
                @if (ViewBag.Categories != null)
                {
                    foreach (var category in ViewBag.Categories)
                    {
                        <option value="@category.Value" @(Model.CategoryID.ToString() == category.Value ? "selected" : "")>@category.Text</option>
                    }
                }
            </select>
        </div>

        <div class="form-group">
            <label>Comments:</label>
            <input class="form-control" name="Comments" value="@Model.Comments" />
        </div>

        @if (Model is Collaborative_Resource_Management_System.Models.Consumable consumable)
        {
            <div class="form-group">
                <label>Price per Unit:</label>
                <input type="number" step="0.01" class="form-control" name="PricePerUnit" value="@consumable.PricePerUnit" />
            </div>

            <div class="form-group">
                <label>Quantity Available:</label>
                <input type="number" class="form-control" name="QuantityAvailable" value="@consumable.QuantityAvailable" />
            </div>

            <div class="form-group">
                <label>Minimum Quantity:</label>
                <input type="number" class="form-control" name="MinimumQuantity" value="@consumable.MinimumQuantity" />
            </div>
        }

        @if (Model is Collaborative_Resource_Management_System.Models.NonConsumable nonConsumable)
        {
            <div class="form-group">
                <label>Asset Tag:</label>
                <input class="form-control" name="AssetTag" value="@nonConsumable.AssetTag" />
            </div>
        }

        <button type="submit" class="btn btn-primary">Save</button>
        <a href="javascript:history.back()" class="btn btn-secondary">Back</a>
    </form>
</div>

<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        var dropArea = document.getElementById('drop-area');

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        function preventDefaults(e) {
            e.preventDefault();
            e.stopPropagation();
        }

        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        function highlight(e) {
            dropArea.classList.add('highlight');
        }

        function unhighlight(e) {
            dropArea.classList.remove('highlight');
        }

        dropArea.addEventListener('drop', handleDrop, false);

        function handleDrop(e) {
            var dt = e.dataTransfer;
            var files = dt.files;

            handleFiles(files);
        }

        function handleFiles(files) {
            ([...files]).forEach(uploadFile);
            ([...files]).forEach(previewFile);
        }

        function uploadFile(file) {
            var url = '/User/Add';
            var formData = new FormData();

            formData.append('Image', file);

            fetch(url, {
                method: 'POST',
                body: formData
            })
                .then(() => { })
                .catch(() => { });
        }

        function previewFile(file) {
            let reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onloadend = function () {
                let img = document.createElement('img');
                img.src = reader.result;
                img.style.maxWidth = '200px'; 
                document.getElementById('preview-container').appendChild(img);
            };
        }
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.bundle.min.js"></script>
