@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Add Inventory";
}


    <div class="container">
       

        <div class="btn-group mb-4" role="group">
            <button id="loadConsumable" class="btn btn-primary">Add Consumable</button>
            <button id="loadNonConsumable" class="btn btn-secondary">Add Non-Consumable</button>
        </div>

        <div id="formContainer">
        </div>
    </div>

    <script>
        document.getElementById('loadConsumable').addEventListener('click', function () {
            loadItemType('Consumable');
        });

        document.getElementById('loadNonConsumable').addEventListener('click', function () {
            loadItemType('NonConsumable');
        });

    function loadItemType(itemType) {
        var url = '/Inventory/LoadItemType?itemType=' + itemType;
        fetch(url)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok ' + response.statusText);
                }
                return response.text();
            })
            .then(html => {
                document.getElementById('formContainer').innerHTML = html;
                initializeDragAndDrop();
            })
            .catch(error => {
                console.error('There has been a problem with your fetch operation:', error);
            });
    }

    function initializeDragAndDrop() {
        var dropArea = document.getElementById('drop-area'); 
        if (!dropArea) return; 

        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            dropArea.addEventListener(eventName, highlight, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            dropArea.addEventListener(eventName, unhighlight, false);
        });

        dropArea.addEventListener('drop', handleDrop, false);
    }

    function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    function highlight(e) {
        e.currentTarget.classList.add('highlight');
    }

    function unhighlight(e) {
        e.currentTarget.classList.remove('highlight');
    }

    function handleDrop(e) {
        var dt = e.dataTransfer;
        var files = dt.files;
        handleFiles(files);
    }

    function handleFiles(files) {
        ([...files]).forEach(previewFile);
    }

    function previewFile(file) {
        let reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onloadend = function () {
            let img = document.createElement('img');
            img.src = reader.result;
            img.style.maxWidth = '200px'; 
            document.getElementById('preview-container').innerHTML = ''; 
            document.getElementById('preview-container').appendChild(img);
            document.getElementById('Image').files = [file];
        };
    }
    </script>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.bundle.min.js"></script>

